import fs from "fs";
import yaml from "js-yaml";
import { update_body_using_QUANTITY_SELL_ALL } from "../../tools/update_body_using_QUANTITY_SELL_ALL.js";
import { sell_long_market_body } from "../Binance/GET_orders/sell_long_market_body.js";
import { update_body_using_QUANTITY_LONG_BUY_STEP } from "../../tools/update_body_using_QUANTITY_LONG_BUY_STEP.js";
import { add_plus_PERCENT_LONG_BUY } from "../../tools/add_plus_PERCENT_LONG_BUY.js";
import { add_plus_QUANTITY_LONG_BUY_STEP } from "../../tools/add_plus_QUANTITY_LONG_BUY_STEP.js";
import { buy_long_market_body } from "../Binance/GET_orders/buy_long_market_body.js";
import { reset_body_symbol_via_settings } from "../../tools/reset_body_symbol_via_settings.js";

const PATH_CANDLE_FILE = "core/the_candle/candle.yaml";
const PATH_CONFIG_FILE = "core/the_candle/config.yaml";
const KEY_TO_FIND_SUFFIX = "_open_percent";
const KEY_CONFIG_COMPARE = "PERCENT_LONG_BUY";

async function run_List() {
  await reset_body_symbol_via_settings();
  await add_plus_PERCENT_LONG_BUY();

  await add_plus_QUANTITY_LONG_BUY_STEP();
  await update_body_using_QUANTITY_SELL_ALL();
  await sell_long_market_body();
  await update_body_using_QUANTITY_LONG_BUY_STEP();
  await buy_long_market_body();
  console.log("- - - üü¢ LONG BUY");
}

async function percent_of_long_buy() {
  try {
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ .yaml
    const candleFile = fs.readFileSync(PATH_CANDLE_FILE, "utf8");
    const configFile = fs.readFileSync(PATH_CONFIG_FILE, "utf8");

    // –ü–∞—Ä—Å–∏–º YAML –≤ –æ–±—ä–µ–∫—Ç—ã
    const candleData = yaml.load(candleFile);
    const configData = yaml.load(configFile);

    // –ò—â–µ–º –≤ candleData –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ KEY_TO_FIND_SUFFIX
    const foundKey = Object.keys(candleData).find((key) =>
      key.endsWith(KEY_TO_FIND_SUFFIX)
    );

    // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    if (!foundKey) {
      console.error(
        `–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∞—è—Å—è –Ω–∞ "${KEY_TO_FIND_SUFFIX}", –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ ${PATH_CANDLE_FILE}`
      );
      return;
    }

    // –î–æ—Å—Ç–∞—ë–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ candle.yaml (—É–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª '%')
    const candleValue = parseFloat(candleData[foundKey].replace("%", ""));

    // –î–æ—Å—Ç–∞—ë–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ KEY_CONFIG_COMPARE (—Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º '%')
    const configValue = parseFloat(
      configData[KEY_CONFIG_COMPARE].replace("%", "")
    );

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    if (candleValue < configValue) {
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ candle.yaml –≤—ã—à–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      await run_List();
    }
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–æ–≤:", error);
  }
}

export { percent_of_long_buy };
